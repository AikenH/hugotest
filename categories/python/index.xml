<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on aiken&#39;s blog</title>
    <link>https://hugotest-phi.vercel.app/categories/python/</link>
    <description>Recent content in Python on aiken&#39;s blog</description>
    <generator>Hugo -- 0.137.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Jul 2023 10:52:26 +0000</lastBuildDate>
    <atom:link href="https://hugotest-phi.vercel.app/categories/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NumpyConcatenate加速</title>
      <link>https://hugotest-phi.vercel.app/posts/numpyconcatenate%E5%8A%A0%E9%80%9F/</link>
      <pubDate>Sun, 02 Jul 2023 10:52:26 +0000</pubDate>
      <guid>https://hugotest-phi.vercel.app/posts/numpyconcatenate%E5%8A%A0%E9%80%9F/</guid>
      <description>&lt;p&gt;多次循环进行 Numpy Concentrate 操作后，当原始数组变得过大的时，单步处理时间会逐渐变长，处理大量数据的时候时间成本极高。&lt;/p&gt;
&lt;h2 id=&#34;解决思路&#34;&gt;解决思路&lt;/h2&gt;
&lt;p&gt;这里简单的讲一下问题的定位过程，通过装饰器 Check 每个函数的执行时间，重点关注执行时长逐渐变长的部分。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;from &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; import &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;def timer&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;func&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    def func_wrapper&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;*args, **kwargs&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;time_start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; time&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; func&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;*args, **kwargs&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;time_end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; time&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; time_end - time_start
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        print&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{} cost time: {} s&amp;#34;&lt;/span&gt;.format&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;func.__name__, res&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; func_wrapper
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;就会发现当 np.Concatenate 导致 Array 很大之后，运行就会逐渐减缓。由于运行缓慢是由于对大数组操作导致的，因此这里考虑将大数组切分成多个小数组，然后再最后进行合并。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;with open&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;file, &lt;span class=&#34;s1&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; as rf:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; line in rf:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nv&#34;&gt;new_row_array&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nv&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; len&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;res_list&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;-1&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; :
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			res_list&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;-1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; new_row_array
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; len&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;res_list&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;-1&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt; &amp;gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; MAX_LENGTH:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				res_list&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;.append&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;new_row_array&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				res_list&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;-1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; np.concatenate&lt;span class=&#34;o&#34;&gt;([&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;					res_list&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;-1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, new_row_array
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; i in range&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;len&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;res_list&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		res_list&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; np.concatenate&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;res_list&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, &lt;span class=&#34;nv&#34;&gt;axis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以看上述这段代码，通过对-1 的使用，来自动的切分 Array，最后再整体合并，这样就能避免每个数组过大的问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python00 Conda 与 Pip</title>
      <link>https://hugotest-phi.vercel.app/posts/python_pack_manager/</link>
      <pubDate>Mon, 06 Mar 2023 11:27:52 +0000</pubDate>
      <guid>https://hugotest-phi.vercel.app/posts/python_pack_manager/</guid>
      <description>&lt;p&gt;@Aikenhong 的旧笔记翻新完善 1.0&lt;/p&gt;
&lt;p&gt;Python 的灵活和广泛应用场景来自于众多的第三方库，由于强大的可拓展性和众多的库，使得 Python 的使用简单灵活，且应用面极广。&lt;/p&gt;
&lt;p&gt;但是不同库之间的相互依赖关系，对版本的不同要求等等因素，使得&amp;quot;环境配置&amp;quot;成为了开发者闻之变色的一词，对一个新的库和项目环境的配置尝尝会花去大量的时间，这可能也是 Docker、Venv（虚拟环境）必须存在的原因之一。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里不对 Docker 及其相关技术，进行说明，会另开章节进行学习。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;才疏学浅的本菜鸡希望从 python 开发者避不开的 conda 和 pip 出发介绍一下关于库安装的一些事情，以及这两个 CLI 的关系。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python Unittest 单元测试的编写与执行</title>
      <link>https://hugotest-phi.vercel.app/posts/unittest/</link>
      <pubDate>Fri, 12 Aug 2022 20:37:00 +0000</pubDate>
      <guid>https://hugotest-phi.vercel.app/posts/unittest/</guid>
      <description>&lt;p&gt;该文章将介绍 Python 中的单元测试之 Unittest 模块，及其在 VsCode 中的集成和使用，主要参考的链接有以下的三个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/sinat_38682860/article/details/102838668&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unittest的基本用法&lt;/a&gt;
、&lt;a href=&#34;https://docs.python.org/zh-cn/3/library/unittest.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python官方文档&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/CloserSide/article/details/109175775&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VsCode运行Unittest&lt;/a&gt;
，其对应 VsCode 侧边栏中的“测试”模块，该部分就由本文来自行补充&lt;/li&gt;
&lt;li&gt;使用Unittest&lt;a href=&#34;https://blog.csdn.net/weixin_44520259/article/details/107840219&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;模拟input的输入&lt;/a&gt;
，便于测试基于命令行输入的代码&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <title>python 与标记语言的交互</title>
      <link>https://hugotest-phi.vercel.app/posts/markup_langs/</link>
      <pubDate>Sun, 28 Nov 2021 11:16:10 +0000</pubDate>
      <guid>https://hugotest-phi.vercel.app/posts/markup_langs/</guid>
      <description>&lt;p&gt;对于各种形式的标记文档（markup）和数据集的处理进行一个整合，还有一些python中的相关模块（比比如glob，后续可能会迁移到别的文档中），主要包括：yaml，json，csv，xml，这些可拓展的标记语言.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TODO：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; csv,xml：这一部分可以看一下吉仲师兄那边是怎么存和取文件的，继承一下代码减少我这一部分的工作量&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 按照csv文件对数据集进行本地的文件夹切分。实际上很多数据集，像mini-imageNet这类的是需要我们下载下来之后按照csv文件对训练集和测试集进行切分的&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 使用sklearn对完整的未切分数据进行切分。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;python-glob&#34;&gt;Python: Glob&lt;/h2&gt;
&lt;p&gt;文件操作相关模块，用于简单的路径匹配的模块，用来查找路径中的相关文件，基本的正则匹配规则如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“*”: 匹配0哥或多个字符&lt;/p&gt;
&lt;p&gt;“?” : 匹配单个字符&lt;/p&gt;
&lt;p&gt;“[ ]”: 匹配指定范围内的字符,如[0-9]匹配所有的数字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;globglob&#34;&gt;glob.glob:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;返回所有匹配的路径列表&lt;/strong&gt;,只有一个参数pathname,定一乐文件路径的匹配规则,可以是绝对路径或者是相对路径,具体的使用可以参考如下的方式:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xmlpath&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;glob&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;glob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;media/all/DATAPART/&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# xmlpath 遍历文件夹下的所有文件和文件夹&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xmlpath&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;glob&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;glob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xmlpath&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/*/*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# xmlpath 遍历文件夹下所有文件夹中的文件夹中的文件:按照层数自由设定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;img_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;glob&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;glob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;*.npy&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 遍历文件夹下的所有npy文件,说实话感觉这个怪离谱的,晚点试一下&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;glob&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;glob&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;glob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;E:/imgdir/*/*.jpg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;!-- more --&gt;
&lt;h3 id=&#34;globiglob&#34;&gt;glob.iglob()&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;获取一个可遍历对象&lt;/strong&gt;使用它可以逐个获取匹配的文件路径名:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;glob:一次获取全部&lt;/li&gt;
&lt;li&gt;iglob:逐个匹配路径获取.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pythonpickle&#34;&gt;Python：pickle&lt;/h2&gt;
&lt;p&gt;palceholder&lt;/p&gt;
&lt;h2 id=&#34;yaml&#34;&gt;YAML&lt;/h2&gt;
&lt;p&gt;YAML是一种标记语言，可以通过YAML定义超参数，然后从外部引入，所以常用来作为一些特定的config，具体的用发和用途可以这样理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当我们使用不同的backbone module的时候，我们可能对于超参数等等的一系列配置是不恒定的，所以使用config文件去配置的时候，当我们每次切换，我们就只需要读取不同的config文件就行了。&lt;/li&gt;
&lt;li&gt;实际上就是argparse的一种替代&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以本文档聚焦于如何在&lt;code&gt;python/cpp&lt;/code&gt;中读取yaml（以及cpp补充相应的数据类型）&lt;/p&gt;</description>
    </item>
    <item>
      <title>（转）What the Fuck Python！ 一些python特性</title>
      <link>https://hugotest-phi.vercel.app/posts/pythontips/</link>
      <pubDate>Sun, 28 Nov 2021 06:24:23 +0000</pubDate>
      <guid>https://hugotest-phi.vercel.app/posts/pythontips/</guid>
      <description>&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://hugotest-phi.vercel.app/images/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 align=&#34;center&#34;&gt;What the f*ck Python! 🐍&lt;/h1&gt;
&lt;p align=&#34;center&#34;&gt;一些有趣且鲜为人知的 Python 特性.&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;a href=&#34;https://github.com/satwikkansal/wtfpython&#34;&gt;English&lt;/a&gt;
| &lt;a href=&#34;#&#34;&gt;中文&lt;/a&gt;
&lt;/p&gt;
[![WTFPL 2.0][license-image]][license-url] [![Commit id][commit-image]][commit-url] [![996.icu][996.icu-image]][996.icu-url]
&lt;p&gt;Python, 是一个设计优美的解释型高级语言, 它提供了很多能让程序员感到舒适的功能特性. 但有的时候, Python 的一些输出结果对于初学者来说似乎并不是那么一目了然.&lt;/p&gt;
&lt;p&gt;这个有趣的项目意在收集 Python 中那些难以理解和反人类直觉的例子以及鲜为人知的功能特性, 并尝试讨论这些现象背后真正的原理!&lt;/p&gt;
&lt;p&gt;虽然下面的有些例子并不一定会让你觉得 WTFs, 但它们依然有可能会告诉你一些你所不知道的 Python 有趣特性.  我觉得这是一种学习编程语言内部原理的好办法, 而且我相信你也会从中获得乐趣!&lt;/p&gt;
&lt;p&gt;如果您是一位经验比较丰富的 Python 程序员, 你可以尝试挑战看是否能一次就找到例子的正确答案. 你可能对其中的一些例子已经比较熟悉了, 那这也许能唤起你当年踩这些坑时的甜蜜回忆 :sweat_smile:&lt;/p&gt;
&lt;p&gt;PS: 如果你不是第一次读了, 你可以在&lt;a href=&#34;https://github.com/satwikkansal/wtfpython/releases/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;
获取变动内容.&lt;/p&gt;
&lt;p&gt;那么, 让我们开始吧&amp;hellip;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h1 id=&#34;table-of-contents目录&#34;&gt;Table of Contents/目录&lt;/h1&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#table-of-contents%e7%9b%ae%e5%bd%95&#34;&gt;Table of Contents/目录&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#structure-of-the-examples%e7%a4%ba%e4%be%8b%e7%bb%93%e6%9e%84&#34;&gt;Structure of the Examples/示例结构&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#usage%e7%94%a8%e6%b3%95&#34;&gt;Usage/用法&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-examples%e7%a4%ba%e4%be%8b&#34;&gt;👀 Examples/示例&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-strain-your-brain%e5%a4%a7%e8%84%91%e8%bf%90%e5%8a%a8&#34;&gt;Section: Strain your brain!/大脑运动!&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#-strings-can-be-tricky-sometimes%e5%be%ae%e5%a6%99%e7%9a%84%e5%ad%97%e7%ac%a6%e4%b8%b2-&#34;&gt;&amp;gt; Strings can be tricky sometimes/微妙的字符串 *&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-time-for-some-hash-brownies%e6%98%af%e6%97%b6%e5%80%99%e6%9d%a5%e7%82%b9%e8%9b%8b%e7%b3%95%e4%ba%86&#34;&gt;&amp;gt; Time for some hash brownies!/是时候来点蛋糕了!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-return-return-everywhere%e5%88%b0%e5%a4%84%e8%bf%94%e5%9b%9e&#34;&gt;&amp;gt; Return return everywhere!/到处返回！&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-deep-down-were-all-the-same%e6%9c%ac%e8%b4%a8%e4%b8%8a%e6%88%91%e4%bb%ac%e9%83%bd%e4%b8%80%e6%a0%b7-&#34;&gt;&amp;gt; Deep down, we&amp;rsquo;re all the same./本质上,我们都一样. *&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-for-what%e4%b8%ba%e4%bb%80%e4%b9%88&#34;&gt;&amp;gt; For what?/为什么?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-evaluation-time-discrepancy%e6%89%a7%e8%a1%8c%e6%97%b6%e6%9c%ba%e5%b7%ae%e5%bc%82&#34;&gt;&amp;gt; Evaluation time discrepancy/执行时机差异&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-is-is-not-what-it-is%e5%87%ba%e4%ba%ba%e6%84%8f%e6%96%99%e7%9a%84is&#34;&gt;&amp;gt; &lt;code&gt;is&lt;/code&gt; is not what it is!/出人意料的&lt;code&gt;is&lt;/code&gt;!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-a-tic-tac-toe-where-x-wins-in-the-first-attempt%e4%b8%80%e8%b9%b4%e5%8d%b3%e8%87%b3&#34;&gt;&amp;gt; A tic-tac-toe where X wins in the first attempt!/一蹴即至!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-the-sticky-output-function%e9%ba%bb%e7%83%a6%e7%9a%84%e8%be%93%e5%87%ba&#34;&gt;&amp;gt; The sticky output function/麻烦的输出&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-is-not--is-not-is-not-is-not--%e4%b8%8d%e6%98%af-is-not-&#34;&gt;&amp;gt; &lt;code&gt;is not ...&lt;/code&gt; is not &lt;code&gt;is (not ...)&lt;/code&gt;/&lt;code&gt;is not ...&lt;/code&gt; 不是 &lt;code&gt;is (not ...)&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-the-surprising-comma%e6%84%8f%e5%a4%96%e7%9a%84%e9%80%97%e5%8f%b7&#34;&gt;&amp;gt; The surprising comma/意外的逗号&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-backslashes-at-the-end-of-string%e5%ad%97%e7%ac%a6%e4%b8%b2%e6%9c%ab%e5%b0%be%e7%9a%84%e5%8f%8d%e6%96%9c%e6%9d%a0&#34;&gt;&amp;gt; Backslashes at the end of string/字符串末尾的反斜杠&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-not-knot%e5%88%ab%e7%ba%a0%e7%bb%93&#34;&gt;&amp;gt; not knot!/别纠结!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-half-triple-quoted-strings%e4%b8%89%e4%b8%aa%e5%bc%95%e5%8f%b7&#34;&gt;&amp;gt; Half triple-quoted strings/三个引号&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-midnight-time-doesnt-exist%e4%b8%8d%e5%ad%98%e5%9c%a8%e7%9a%84%e5%8d%88%e5%a4%9c&#34;&gt;&amp;gt; Midnight time doesn&amp;rsquo;t exist?/不存在的午夜?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-whats-wrong-with-booleans%e5%b8%83%e5%b0%94%e4%bd%a0%e5%92%8b%e4%ba%86&#34;&gt;&amp;gt; What&amp;rsquo;s wrong with booleans?/布尔你咋了?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-class-attributes-and-instance-attributes%e7%b1%bb%e5%b1%9e%e6%80%a7%e5%92%8c%e5%ae%9e%e4%be%8b%e5%b1%9e%e6%80%a7&#34;&gt;&amp;gt; Class attributes and instance attributes/类属性和实例属性&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-yielding-none%e7%94%9f%e6%88%90-none&#34;&gt;&amp;gt; yielding None/生成 None&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-mutating-the-immutable%e5%bc%ba%e4%ba%ba%e6%89%80%e9%9a%be&#34;&gt;&amp;gt; Mutating the immutable!/强人所难&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-the-disappearing-variable-from-outer-scope%e6%b6%88%e5%a4%b1%e7%9a%84%e5%a4%96%e9%83%a8%e5%8f%98%e9%87%8f&#34;&gt;&amp;gt; The disappearing variable from outer scope/消失的外部变量&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-when-true-is-actually-false%e7%9c%9f%e4%ba%a6%e5%81%87&#34;&gt;&amp;gt; When True is actually False/真亦假&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-from-filled-to-none-in-one-instruction%e4%bb%8e%e6%9c%89%e5%88%b0%e6%97%a0&#34;&gt;&amp;gt; From filled to None in one instruction&amp;hellip;/从有到无&amp;hellip;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-subclass-relationships%e5%ad%90%e7%b1%bb%e5%85%b3%e7%b3%bb-&#34;&gt;&amp;gt; Subclass relationships/子类关系 *&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-the-mysterious-key-type-conversion%e7%a5%9e%e7%a7%98%e7%9a%84%e9%94%ae%e5%9e%8b%e8%bd%ac%e6%8d%a2-&#34;&gt;&amp;gt; The mysterious key type conversion/神秘的键型转换 *&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-lets-see-if-you-can-guess-this%e7%9c%8b%e7%9c%8b%e4%bd%a0%e8%83%bd%e5%90%a6%e7%8c%9c%e5%88%b0%e8%bf%99%e4%b8%80%e7%82%b9&#34;&gt;&amp;gt; Let&amp;rsquo;s see if you can guess this?/看看你能否猜到这一点?&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-appearances-are-deceptive%e5%a4%96%e8%a1%a8%e6%98%af%e9%9d%a0%e4%b8%8d%e4%bd%8f%e7%9a%84&#34;&gt;Section: Appearances are deceptive!/外表是靠不住的!&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#-skipping-lines%e8%b7%b3%e8%bf%87%e4%b8%80%e8%a1%8c&#34;&gt;&amp;gt; Skipping lines?/跳过一行?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-teleportation%e7%a9%ba%e9%97%b4%e7%a7%bb%e5%8a%a8-&#34;&gt;&amp;gt; Teleportation/空间移动 *&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-well-something-is-fishy%e5%97%af%e6%9c%89%e4%ba%9b%e5%8f%af%e7%96%91&#34;&gt;&amp;gt; Well, something is fishy&amp;hellip;/嗯, 有些可疑&amp;hellip;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-watch-out-for-the-landmines%e5%b0%8f%e5%bf%83%e5%9c%b0%e9%9b%b7&#34;&gt;Section: Watch out for the landmines!/小心地雷!&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#-modifying-a-dictionary-while-iterating-over-it%e8%bf%ad%e4%bb%a3%e5%ad%97%e5%85%b8%e6%97%b6%e7%9a%84%e4%bf%ae%e6%94%b9&#34;&gt;&amp;gt; Modifying a dictionary while iterating over it/迭代字典时的修改&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-stubborn-del-operator%e5%9d%9a%e5%bc%ba%e7%9a%84-del-&#34;&gt;&amp;gt; Stubborn &lt;code&gt;del&lt;/code&gt; operator/坚强的 &lt;code&gt;del&lt;/code&gt; *&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-deleting-a-list-item-while-iterating%e8%bf%ad%e4%bb%a3%e5%88%97%e8%a1%a8%e6%97%b6%e5%88%a0%e9%99%a4%e5%85%83%e7%b4%a0&#34;&gt;&amp;gt; Deleting a list item while iterating/迭代列表时删除元素&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-loop-variables-leaking-out%e5%be%aa%e7%8e%af%e5%8f%98%e9%87%8f%e6%b3%84%e6%bc%8f&#34;&gt;&amp;gt; Loop variables leaking out!/循环变量泄漏!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-beware-of-default-mutable-arguments%e5%bd%93%e5%bf%83%e9%bb%98%e8%ae%a4%e7%9a%84%e5%8f%af%e5%8f%98%e5%8f%82%e6%95%b0&#34;&gt;&amp;gt; Beware of default mutable arguments!/当心默认的可变参数!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-catching-the-exceptions%e6%8d%95%e8%8e%b7%e5%bc%82%e5%b8%b8&#34;&gt;&amp;gt; Catching the Exceptions/捕获异常&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-same-operands-different-story%e5%90%8c%e4%ba%ba%e4%b8%8d%e5%90%8c%e5%91%bd&#34;&gt;&amp;gt; Same operands, different story!/同人不同命!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-the-out-of-scope-variable%e5%a4%96%e9%83%a8%e4%bd%9c%e7%94%a8%e5%9f%9f%e5%8f%98%e9%87%8f&#34;&gt;&amp;gt; The out of scope variable/外部作用域变量&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-be-careful-with-chained-operations%e5%b0%8f%e5%bf%83%e9%93%be%e5%bc%8f%e6%93%8d%e4%bd%9c&#34;&gt;&amp;gt; Be careful with chained operations/小心链式操作&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-name-resolution-ignoring-class-scope%e5%bf%bd%e7%95%a5%e7%b1%bb%e4%bd%9c%e7%94%a8%e5%9f%9f%e7%9a%84%e5%90%8d%e7%a7%b0%e8%a7%a3%e6%9e%90&#34;&gt;&amp;gt; Name resolution ignoring class scope/忽略类作用域的名称解析&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-needle-in-a-haystack%e5%a4%a7%e6%b5%b7%e6%8d%9e%e9%92%88&#34;&gt;&amp;gt; Needle in a Haystack/大海捞针&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-the-hidden-treasures%e9%9a%90%e8%97%8f%e7%9a%84%e5%ae%9d%e8%97%8f&#34;&gt;Section: The Hidden treasures!/隐藏的宝藏!&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#-okay-python-can-you-make-me-flypython-%e5%8f%af%e5%90%a6%e5%b8%a6%e6%88%91%e9%a3%9e-&#34;&gt;&amp;gt; Okay Python, Can you make me fly?/Python, 可否带我飞? *&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-goto-but-whygoto-%e4%bd%86%e4%b8%ba%e4%bb%80%e4%b9%88-&#34;&gt;&amp;gt; &lt;code&gt;goto&lt;/code&gt;, but why?/&lt;code&gt;goto&lt;/code&gt;, 但为什么? *&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-brace-yourself%e5%81%9a%e5%a5%bd%e6%80%9d%e6%83%b3%e5%87%86%e5%a4%87-&#34;&gt;&amp;gt; Brace yourself!/做好思想准备 *&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-lets-meet-friendly-language-uncle-for-life%e8%ae%a9%e7%94%9f%e6%b4%bb%e6%9b%b4%e5%8f%8b%e5%a5%bd-&#34;&gt;&amp;gt; Let&amp;rsquo;s meet Friendly Language Uncle For Life/让生活更友好 *&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-even-python-understands-that-love-is-complicated%e8%bf%9ePython%e4%b9%9f%e7%9f%a5%e9%81%93%e7%88%b1%e6%98%af%e9%9a%be%e8%a8%80%e7%9a%84-&#34;&gt;&amp;gt; Even Python understands that love is complicated/连Python也知道爱是难言的 *&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-yes-it-exists%e6%98%af%e7%9a%84-%e5%ae%83%e5%ad%98%e5%9c%a8&#34;&gt;&amp;gt; Yes, it exists!/是的, 它存在!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-inpinity%e6%97%a0%e9%99%90-&#34;&gt;&amp;gt; Inpinity/无限 *&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-mangling-time%e4%bf%ae%e9%a5%b0%e6%97%b6%e9%97%b4-&#34;&gt;&amp;gt; Mangling time!修饰时间! *&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-miscellaneous%e6%9d%82%e9%a1%b9&#34;&gt;Section: Miscellaneous/杂项&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#--is-faster%e6%9b%b4%e5%bf%ab%e7%9a%84-&#34;&gt;&amp;gt; &lt;code&gt;+=&lt;/code&gt; is faster/更快的 &lt;code&gt;+=&lt;/code&gt; &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-lets-make-a-giant-string%e6%9d%a5%e5%81%9a%e4%b8%aa%e5%b7%a8%e5%a4%a7%e7%9a%84%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%90%a7&#34;&gt;&amp;gt; Let&amp;rsquo;s make a giant string!/来做个巨大的字符串吧!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-explicit-typecast-of-strings%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%9a%84%e6%98%be%e5%bc%8f%e7%b1%bb%e5%9e%8b%e8%bd%ac%e6%8d%a2&#34;&gt;&amp;gt; Explicit typecast of strings/字符串的显式类型转换&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-minor-ones%e5%b0%8f%e7%9f%a5%e8%af%86%e7%82%b9&#34;&gt;&amp;gt; Minor Ones/小知识点&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#contributing%e8%b4%a1%e7%8c%ae&#34;&gt;Contributing/贡献&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#acknowledgements%e8%87%b4%e8%b0%a2&#34;&gt;Acknowledgements/致谢&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#-license%e8%ae%b8%e5%8f%af&#34;&gt;🎓 License/许可&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#help%e5%b8%ae%e5%8a%a9&#34;&gt;Help/帮助&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#surprise-your-geeky-pythonist-friends%e6%83%b3%e7%bb%99%e4%bd%a0%e7%9a%84%e6%9e%81%e5%ae%a2%e6%9c%8b%e5%8f%8b%e4%b8%80%e4%b8%aa%e6%83%8a%e5%96%9c&#34;&gt;Surprise your geeky pythonist friends?/想给你的极客朋友一个惊喜?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#need-a-pdf-version%e9%9c%80%e8%a6%81%e6%9d%a5%e4%b8%80%e4%bb%bdpdf%e7%89%88%e7%9a%84&#34;&gt;Need a pdf version?/需要来一份pdf版的?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#follow-commit%e8%bf%bd%e8%b8%aaCommit&#34;&gt;Follow Commit/追踪Commit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#996icu&#34;&gt;996.icu&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
&lt;h1 id=&#34;structure-of-the-examples示例结构&#34;&gt;Structure of the Examples/示例结构&lt;/h1&gt;
&lt;p&gt;所有示例的结构都如下所示:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fluent Python 01 数据模型与结构</title>
      <link>https://hugotest-phi.vercel.app/posts/fluent_python/</link>
      <pubDate>Sat, 06 Nov 2021 12:53:47 +0000</pubDate>
      <guid>https://hugotest-phi.vercel.app/posts/fluent_python/</guid>
      <description>&lt;h2 id=&#34;chapter-1-数据模型&#34;&gt;Chapter 1 数据模型&lt;/h2&gt;
&lt;h3 id=&#34;se1-magic-method&#34;&gt;Se1 magic method&lt;/h3&gt;
&lt;p&gt;数据模型在这里的定义是对python框架的描述,他规范了python构建模块的接口；这些接口对应解释器中对一些特殊句法(常用句法)的激活和使用.本章节的核心就在于对这些特殊句法的理解和使用.
特殊方法带来的一些主要交互场景:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;迭代&lt;/li&gt;
&lt;li&gt;属性访问&lt;/li&gt;
&lt;li&gt;集合类&lt;/li&gt;
&lt;li&gt;函数和方法的调用&lt;/li&gt;
&lt;li&gt;对象的创建和销毁&lt;/li&gt;
&lt;li&gt;字符串的表示形式和格式化&lt;/li&gt;
&lt;li&gt;上下文管理模块(with模块)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些特殊方法的存在实际上，是为了让python的解释器调用，除非我们有大量的元编程，否则我们一般不调用他，通过内置的&lt;code&gt;len&lt;/code&gt;等函数进行调用的话，他们的速度更快&lt;/p&gt;
&lt;p&gt;下面我们通过最典型的&lt;code&gt;__getitem__&lt;/code&gt;和&lt;code&gt;__len__&lt;/code&gt;对其有简单的介绍, 并介绍各个魔术方法的使用场景&lt;/p&gt;
&lt;h3 id=&#34;se2-using-it-and-show-more&#34;&gt;Se2 using it and show more&lt;/h3&gt;
&lt;p&gt;最常用也最典型的magic method 不外乎&lt;code&gt;__getitem__&lt;/code&gt;和&lt;code&gt;__len__&lt;/code&gt;;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;len即对当前对象提供对于通用的&lt;code&gt;len()&lt;/code&gt;方法的接口,通常用于查看对象的&lt;code&gt;length or size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;getitem除了提供&lt;code&gt;obj[index]&lt;/code&gt;的索引方式的同时,
&lt;ul&gt;
&lt;li&gt;他也会对python内置的那些迭代方法提供支持&lt;code&gt;for i in range(b)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对于依托于这些迭代的方法也能够得以支持&lt;code&gt;from random import choice&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;切片操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;se21-overwrite-operator&#34;&gt;Se2.1 overwrite operator&lt;/h4&gt;
&lt;!-- more --&gt;
&lt;p&gt;这一部分我们主要介绍如下的一些特殊方法,他们将实现&lt;code&gt;+,*,abs,print,bool&lt;/code&gt;
对应的特殊方法可以从下面的代码中领会&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;math&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hypot&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# hypot will calculate the eud-dis from 0-point(x,y)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# we using vector as an example&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Vector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__repr__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# this method -&amp;gt; print&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Vertor(&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;)&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__abs__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hypot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__add__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Vector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__mul__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scalar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vertor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scalar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scalar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__bool__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在这里需要注意的是,中缀运算符像add,mul的原则都是不改变操作对象,而是生成一个新的对象.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python01 数据模型和常用数据结构</title>
      <link>https://hugotest-phi.vercel.app/posts/python/</link>
      <pubDate>Wed, 27 Oct 2021 14:19:13 +0000</pubDate>
      <guid>https://hugotest-phi.vercel.app/posts/python/</guid>
      <description>&lt;p&gt;个人的《Python Cookbook》 &amp;amp;&amp;amp; 《Fluent Python》阅读笔记。&lt;/p&gt;
&lt;h1 id=&#34;数据模型python结构的通用范式&#34;&gt;数据模型（Python结构的通用范式）&lt;/h1&gt;
&lt;p&gt;（Magic method）dunder method：Python特有的双下划线方法，这些方法能够支持Python进行特殊的调用，实现通用方法在新定义的数据结构上的使用，比如最典型的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;__len__()&lt;/code&gt;后可以支持&lt;code&gt;len()&lt;/code&gt;，获得结构的长度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;__getitem__()&lt;/code&gt;后可以支持&lt;code&gt;data[index]&lt;/code&gt;来获取相应的元素，切片，等等数组的操作；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 也可以支持类似如下的一些操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 从数据结构中随机选出一个items&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 也可以支持迭代方法和反迭代方法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;reversed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 也可以支持sort函数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到这里也就说明了，只要我们在数据结构（class）中定义了相应的dunder method，该class就能支持相应的一系列操作，getitems就可以类比为列表，相应的操作都能够在python解释器下自动的赋予支持。&lt;/p&gt;
&lt;p&gt;还有一些好用但不常用的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__contain__&lt;/code&gt;实现的是&lt;code&gt;in&lt;/code&gt; ，当没有实现contain的方法的时候会按照顺序在list中进行搜索&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__abs__&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__repr__&lt;/code&gt;实现的是输出的format设置，也就是print的时候的输出形式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__eq__&lt;/code&gt; 实现的是  == 命令，同时in调用的是__eq__&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面附上一张特殊方法表：&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;基本命名规范&#34;&gt;基本命名规范&lt;/h3&gt;
&lt;p&gt;相关的文件和函数等命名规则。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;Python%20Notebook%20ad3f0aafe5a54942bdcc3694a9a88976/%E5%91%BD%E5%90%8D%E6%A0%B7%E4%BE%8B%E8%A1%A8%2039d2a928f8bf4624afc2e0006ffcd528.csv&#34;&gt;命名样例表&lt;/a&gt;
&lt;/p&gt;
&lt;h1 id=&#34;变量赋值传递时的引用和拷贝&#34;&gt;变量赋值传递时的引用和拷贝&lt;/h1&gt;
&lt;p&gt;Python 变量的传递类型：（赋值过程）
&lt;a href=&#34;https://www.runoob.com/w3cnote/python-variable-references-and-copies.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.runoob.com/w3cnote/python-variable-references-and-copies.html&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Python 赋值过程中不明确区分拷贝和引用，一般对静态变量的传递为拷贝，对动态变量的传递为引用。（注，对静态变量首次传递时也是引用，当需要修改静态变量时，因为静态变量不能改变，所以需要生成一个新的空间存储数据）。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;•  字符串，数值，元组 均为静态变量
• 列表，字典为动态变量。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以用id（）查看指向的地址&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
